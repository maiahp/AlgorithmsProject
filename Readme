ReadMe

This repository contains the solution to the sequence alignment problem for strings X and Y. Note that len(X) = n, len(Y) = m.
The basic_3.py file is the dynamic programming solution with O(m*n) space.
The efficient_3.py file is the memory efficient solution, which uses Divide and Conquer with Dynamic Programming in the divide step, with O(n) space.

Mem-Efficient Algorithm High-Level Overview:
1. Handle Base Cases
2. Split string X into halves X_l, X_r
   Find the optimal split point of string Y: Y_l, Y_r which matches with X_l, X_r in the cheapest way
3. Combine Result


Run scripts                             
# ./run_it_all.sh 
# Runs basic and efficient algorithms on files in ./datapoints

# ./basic.sh inputfile outputfile
# Runs basic algorithm on inputfile, with result in outputfile

# ./efficient.sh inputfile outputfile
# Runs efficient algorithm on inputfile, with result in outputfile

py files
# basic_3.py 
# Contains basic algorithm

# efficient_3.py
# Contains efficient algorithm

# processfile.py
# grabs data from input and output files in ./SampleTestCases

# main.py
# unit testing program with different tests to ensure correctness of program

# plotter.py
# After running ./run_it_all.sh grabs output data from the output files created(in out_basic and out_efficient folders) and presents it for easy copy and paste for plotting 
# Note: printed in form: (m+n, time_data_basic, time_data_efficient)
                     and (m+n, memory_data_basic, memory_data_efficient)
# Run as: python3 plotter.py
